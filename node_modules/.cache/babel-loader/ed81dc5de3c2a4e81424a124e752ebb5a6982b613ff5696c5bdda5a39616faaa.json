{"ast":null,"code":"var _jsxFileName = \"/Users/yudayouhei/Desktop/MENTA/React/todo-api/react-create-motion/todo-api/src/App.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css'; // BootstrapのCSSをインポート\nimport React, { useState } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button'; // React BootstrapのButtonコンポーネントをインポート\nimport Container from 'react-bootstrap/Container'; // React BootstrapのContainerコンポーネントをインポーレート\nimport Navbar from 'react-bootstrap/Navbar'; // React BootstrapのNavbarコンポーネントをインポート\nimport EditModal from './components/EditModal'; // 分離したEditModalコンポーネントをインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BasicExample() {\n  _s();\n  const [contents, setContents] = useState([]);\n  const [showModal, setShowModal] = useState(false); // モーダル初期状態を非表示にしておく\n  const [selectedContentId, setSelectedContentId] = useState(null); // 編集ボタンクリック時のidを管理\n  const [editedText, setEditedText] = useState(''); // フォームの状態を管理\n  const [addText, setAddText] = useState(''); // 新規ボタンクリック時のテキストの値を管理\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true); // 保存ボタンの表示状態を管理\n  const [errorMessage, setErrorMessage] = useState(''); // 新規追加時のエラーメッセージの状態を管理\n  const [errorModalMessage, setModalErrorMessage] = useState(''); // 保存時のエラーメッセージの状態を管理\n\n  // 新規追加ボタンクリック時の動作\n  const onClickAdd = () => {\n    if (addText === \"\") {\n      setErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      return;\n    }\n    const id = Date.now(); // 一意のIDを生成\n    const newContent = {\n      id,\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"todo-paragraph\",\n            children: addText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            size: \"sm\",\n            onClick: () => handleEdit(id),\n            children: \"\\u7DE8\\u96C6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleDelete(id),\n            variant: \"danger\",\n            size: \"sm\",\n            children: \"\\u524A\\u9664\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    };\n    setContents([...contents, newContent]);\n    setAddText('');\n    setErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 指定行をidにて判断しを削除\n  const handleDelete = id => {\n    setContents(prevContents => prevContents.filter(content => content.id !== id));\n  };\n\n  // 編集ボタンクリック時の動作\n  const handleEdit = id => {\n    console.log('OK');\n    setShowModal(true); // モーダルを表示\n    const contentToEdit = contents.find(content => content.id === id);\n    if (contentToEdit) {\n      // JSXからテキストを取得する方法\n      const textToEdit = contentToEdit.content.props.children[0].props.children.props.children;\n      setSelectedContentId(id); // 編集対象のコンテンツIDをセット\n      setEditedText(textToEdit); // 編集用テキストをセット\n      setIsSaveButtonVisible(true); // 初期状態でボタンの表示状態を設定\n      setModalErrorMessage(\"\"); // モーダル内のエラーメッセージをクリア\n    }\n  };\n\n  // モーダルを閉じる\n  const handleClose = () => setShowModal(false);\n\n  // 編集内容を保存\n  const handleSave = () => {\n    if (editedText === \"\") {\n      setModalErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      setIsSaveButtonVisible(false); // ボタンを非表示にする\n      return;\n    }\n    setContents(prevContents => prevContents.map(content => content.id === selectedContentId ? {\n      ...content,\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"todo-paragraph\",\n            children: editedText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            size: \"sm\",\n            onClick: () => handleEdit(content.id),\n            children: \"\\u7DE8\\u96C6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleDelete(content.id),\n            variant: \"danger\",\n            size: \"sm\",\n            children: \"\\u524A\\u9664\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 19\n        }, this)]\n      }, content.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    } : content));\n    setShowModal(false);\n    setModalErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 新規追加時のテキストボックスの入力に応じてエラーメッセージをクリア\n  const handleAddTextChange = e => {\n    setAddText(e.target.value);\n    if (e.target.value !== \"\") {\n      setErrorMessage(''); // テキストボックスに値がある場合はエラーメッセージをクリア\n    }\n  };\n\n  // テキストボックスの入力に応じて保存ボタンの表示状態を更新\n  const handleChange = e => {\n    const newText = e.target.value;\n    setEditedText(newText);\n    if (newText !== \"\") {\n      setModalErrorMessage(''); // エラーメッセージをクリア\n    }\n  };\n\n  // エンターキーを押したときにonClickAddを呼び出す\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      onClickAdd();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: addText,\n          onChange: handleAddTextChange // 新規追加時のテキストボックス変更に応じた処理\n          ,\n          onKeyPress: handleKeyPress // エンターキー押下時にonClickAddを呼び出す\n          ,\n          className: \"add-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 24\n    }, this), \" \\u30A8\\u30E9\\u30FC\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u8868\\u793A\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todos-header\",\n        children: \"Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), contents.map(content => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: content.content\n      }, content.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditModal\n    // モーダルが表示されているかどうかを制御。trueの場合、モーダルが表示され、falseの場合は非表示\n    , {\n      showModal: showModal\n      // モーダルの閉じるボタンが押下時に呼び出し\n      ,\n      handleClose: handleClose\n      // モーダル内のテキストボックスの値を管理\n      ,\n      editedText: editedText\n      // モーダル内のテキストボックスの値が変更された時に呼び出される関数。新しいテキストの値をeditedTextに反映\n      ,\n      handleChange: handleChange\n      // 編集内容を保存する関数。保存ボタンがクリックされたと時に呼び出される\n      ,\n      handleSave: handleSave\n      // 保存ボタンの表示・非表示を制御。trueの場合、保存ボタンを表示、falseの場合は非表示\n      ,\n      isSaveButtonVisible: isSaveButtonVisible\n      // モーダル内のテキストボックスが未入力の時、エラーメッセージを表示\n      ,\n      errorModalMessage: errorModalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(BasicExample, \"X5CzkawCLgMqWsjfAzM8j8tW4Sw=\");\n_c = BasicExample;\nexport default BasicExample;\nvar _c;\n$RefreshReg$(_c, \"BasicExample\");","map":{"version":3,"names":["React","useState","Button","Container","Navbar","EditModal","jsxDEV","_jsxDEV","BasicExample","_s","contents","setContents","showModal","setShowModal","selectedContentId","setSelectedContentId","editedText","setEditedText","addText","setAddText","isSaveButtonVisible","setIsSaveButtonVisible","errorMessage","setErrorMessage","errorModalMessage","setModalErrorMessage","onClickAdd","id","Date","now","newContent","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","handleEdit","handleDelete","prevContents","filter","console","log","contentToEdit","find","textToEdit","props","handleClose","handleSave","map","handleAddTextChange","e","target","value","handleChange","newText","handleKeyPress","key","type","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["/Users/yudayouhei/Desktop/MENTA/React/todo-api/react-create-motion/todo-api/src/App.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'; // BootstrapのCSSをインポート\nimport React, { useState } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button'; // React BootstrapのButtonコンポーネントをインポート\nimport Container from 'react-bootstrap/Container'; // React BootstrapのContainerコンポーネントをインポーレート\nimport Navbar from 'react-bootstrap/Navbar'; // React BootstrapのNavbarコンポーネントをインポート\nimport EditModal from './components/EditModal'; // 分離したEditModalコンポーネントをインポート\n\nfunction BasicExample() {\n  const [contents, setContents] = useState([]);\n  const [showModal, setShowModal] = useState(false); // モーダル初期状態を非表示にしておく\n  const [selectedContentId, setSelectedContentId] = useState(null); // 編集ボタンクリック時のidを管理\n  const [editedText, setEditedText] = useState(''); // フォームの状態を管理\n  const [addText, setAddText] = useState(''); // 新規ボタンクリック時のテキストの値を管理\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true); // 保存ボタンの表示状態を管理\n  const [errorMessage, setErrorMessage] = useState(''); // 新規追加時のエラーメッセージの状態を管理\n  const [errorModalMessage, setModalErrorMessage] = useState(''); // 保存時のエラーメッセージの状態を管理\n\n  // 新規追加ボタンクリック時の動作\n  const onClickAdd = () => {\n    if (addText === \"\") {\n      setErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      return;\n    }\n    const id = Date.now();  // 一意のIDを生成\n    const newContent = {\n      id,\n      content: (\n        <div className=\"todo-item\" key={id}>\n          <div className=\"todo-text\">\n            <p className=\"todo-paragraph\">{addText}</p>\n          </div>\n          <div className=\"todo-buttons\">\n            <Button variant=\"primary\" size=\"sm\" onClick={() => handleEdit(id)}>\n              編集\n            </Button>{' '}\n            <Button onClick={() => handleDelete(id)} variant=\"danger\" size=\"sm\">\n              削除\n            </Button>\n          </div>\n        </div>\n      )\n    };\n    setContents([...contents, newContent]);\n    setAddText('');\n    setErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 指定行をidにて判断しを削除\n  const handleDelete = (id) => {\n    setContents(prevContents => prevContents.filter(content => content.id !== id));\n  };\n\n  // 編集ボタンクリック時の動作\n  const handleEdit = (id) => {\n    console.log('OK');\n    setShowModal(true); // モーダルを表示\n    const contentToEdit = contents.find(content => content.id === id);\n    if (contentToEdit) {\n      // JSXからテキストを取得する方法\n      const textToEdit = contentToEdit.content.props.children[0].props.children.props.children;\n      setSelectedContentId(id); // 編集対象のコンテンツIDをセット\n      setEditedText(textToEdit); // 編集用テキストをセット\n      setIsSaveButtonVisible(true); // 初期状態でボタンの表示状態を設定\n      setModalErrorMessage(\"\"); // モーダル内のエラーメッセージをクリア\n\n    }\n  };\n\n  // モーダルを閉じる\n  const handleClose = () => setShowModal(false);\n\n  // 編集内容を保存\n  const handleSave = () => {\n    if (editedText === \"\") {\n      setModalErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      setIsSaveButtonVisible(false); // ボタンを非表示にする\n      return;\n    }\n    setContents(prevContents =>\n      prevContents.map(content =>\n        content.id === selectedContentId\n          ? {\n              ...content,\n              content: (\n                <div className=\"todo-item\" key={content.id}>\n                  <div className=\"todo-text\">\n                    <p className=\"todo-paragraph\">{editedText}</p>\n                  </div>\n                  <div className=\"todo-buttons\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleEdit(content.id)}>\n                      編集\n                    </Button>{' '}\n                    <Button onClick={() => handleDelete(content.id)} variant=\"danger\" size=\"sm\">\n                      削除\n                    </Button>\n                  </div>\n                </div>\n              )\n            }\n          : content\n      )\n    );\n    setShowModal(false);\n    setModalErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 新規追加時のテキストボックスの入力に応じてエラーメッセージをクリア\n  const handleAddTextChange = (e) => {\n    setAddText(e.target.value);\n    if (e.target.value !== \"\") {\n      setErrorMessage(''); // テキストボックスに値がある場合はエラーメッセージをクリア\n    }\n  };\n\n  // テキストボックスの入力に応じて保存ボタンの表示状態を更新\n  const handleChange = (e) => {\n    const newText = e.target.value;\n    setEditedText(newText);\n    if (newText !== \"\") {\n      setModalErrorMessage(''); // エラーメッセージをクリア\n    }\n  };\n\n  // エンターキーを押したときにonClickAddを呼び出す\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      onClickAdd();\n    }\n  };\n  \n\n  return (\n    <section>\n      {/* <Navbar className=\"custom-navbar bg-body-tertiary\" expand=\"lg\">\n        <Container className=\"navbar-container\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n        </Container>\n      </Navbar> */}\n      <div className=\"add-section\">\n        <div className=\"input-container\">\n          <input\n            type='text'\n            value={addText}\n            onChange={handleAddTextChange} // 新規追加時のテキストボックス変更に応じた処理\n            onKeyPress={handleKeyPress} // エンターキー押下時にonClickAddを呼び出す\n            className=\"add-input\"\n          />\n        </div>\n        {/* <Button onClick={onClickAdd} variant=\"info\">新規追加</Button> */}\n      </div>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>} エラーメッセージを表示\n      <div className=\"todos-container\">\n        <div className=\"todos-header\">Todos</div>\n        {contents.map((content) => (\n          <div key={content.id}>\n            {content.content}\n          </div>\n        ))}\n      </div>\n      <EditModal\n        // モーダルが表示されているかどうかを制御。trueの場合、モーダルが表示され、falseの場合は非表示\n        showModal={showModal}\n        // モーダルの閉じるボタンが押下時に呼び出し\n        handleClose={handleClose}\n        // モーダル内のテキストボックスの値を管理\n        editedText={editedText}\n        // モーダル内のテキストボックスの値が変更された時に呼び出される関数。新しいテキストの値をeditedTextに反映\n        handleChange={handleChange}\n        // 編集内容を保存する関数。保存ボタンがクリックされたと時に呼び出される\n        handleSave={handleSave}\n        // 保存ボタンの表示・非表示を制御。trueの場合、保存ボタンを表示、falseの場合は非表示\n        isSaveButtonVisible={isSaveButtonVisible}\n        // モーダル内のテキストボックスが未入力の時、エラーメッセージを表示\n        errorModalMessage={errorModalMessage}\n      />\n    </section>\n  );\n}\n\nexport default BasicExample;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}