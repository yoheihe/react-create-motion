{"ast":null,"code":"var _jsxFileName = \"/Users/yudayouhei/Desktop/MENTA/React/todo-api/react-create-motion/todo-api/src/App.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css'; // BootstrapのCSSをインポート\nimport React, { useState } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button'; // React BootstrapのButtonコンポーネントをインポート\nimport Container from 'react-bootstrap/Container'; // React BootstrapのContainerコンポーネントをインポーレート\nimport Navbar from 'react-bootstrap/Navbar'; // React BootstrapのNavbarコンポーネントをインポート\nimport EditModal from './components/EditModal'; // 分離したEditModalコンポーネントをインポート\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BasicExample() {\n  _s();\n  const [contents, setContents] = useState([]);\n  const [showModal, setShowModal] = useState(false); // モーダル初期状態を非表示にしておく\n  const [selectedContentId, setSelectedContentId] = useState(null); // 編集ボタンクリック時のidを管理\n  const [editedText, setEditedText] = useState(''); // フォームの状態を管理\n  const [addText, setAddText] = useState(''); // 新規ボタンクリック時のテキストの値を管理\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true); // 保存ボタンの表示状態を管理\n  const [errorMessage, setErrorMessage] = useState(''); // 新規追加時のエラーメッセージの状態を管理\n  const [errorModalMessage, setModalErrorMessage] = useState(''); // 保存時のエラーメッセージの状態を管理\n  const url = 'https://sample-api.manabupanda.net/api/list';\n\n  // 新規追加ボタンクリック時の動作\n  const onClickAdd = async () => {\n    if (addText === \"\") {\n      setErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      return;\n    }\n    try {\n      // POSTリクエストを送信\n      const response = await axios.post(url, {\n        content: addText // 送信するデータ\n      });\n\n      // サーバーから返された新しいデータをもとにコンテンツを更新\n      const newContent = {\n        id: response.data.id,\n        // サーバーから返されるIDを使用\n        content: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todo-text\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"todo-paragraph\",\n              children: response.data.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"todo-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"sm\",\n              onClick: () => handleEdit(response.data.id),\n              children: \"\\u7DE8\\u96C6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => handleDelete(response.data.id),\n              variant: \"danger\",\n              size: \"sm\",\n              children: \"\\u524A\\u9664\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }, this)]\n        }, response.data.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)\n      };\n      setContents([...contents, newContent]);\n      setAddText('');\n      setErrorMessage(''); // エラーメッセージをクリア\n    } catch (error) {\n      console.error('POSTリクエストエラー:', error);\n      setErrorMessage('データの追加に失敗しました'); // エラーメッセージを表示\n    }\n  };\n\n  // 指定行をidにて判断しを削除\n  const handleDelete = id => {\n    setContents(prevContents => prevContents.filter(content => content.id !== id));\n  };\n\n  // 編集ボタンクリック時の動作\n  const handleEdit = id => {\n    console.log('OK');\n    setShowModal(true); // モーダルを表示\n    const contentToEdit = contents.find(content => content.id === id);\n    if (contentToEdit) {\n      // JSXからテキストを取得する方法\n      const textToEdit = contentToEdit.content.props.children[0].props.children.props.children;\n      setSelectedContentId(id); // 編集対象のコンテンツIDをセット\n      setEditedText(textToEdit); // 編集用テキストをセット\n      setIsSaveButtonVisible(true); // 初期状態でボタンの表示状態を設定\n      setModalErrorMessage(\"\"); // モーダル内のエラーメッセージをクリア\n    }\n  };\n\n  // モーダルを閉じる\n  const handleClose = () => setShowModal(false);\n\n  // 編集内容を保存\n  const handleSave = () => {\n    if (editedText === \"\") {\n      setModalErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      setIsSaveButtonVisible(false); // ボタンを非表示にする\n      return;\n    }\n    setContents(prevContents => prevContents.map(content => content.id === selectedContentId ? {\n      ...content,\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-text\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"todo-paragraph\",\n            children: editedText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            size: \"sm\",\n            onClick: () => handleEdit(content.id),\n            children: \"\\u7DE8\\u96C6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleDelete(content.id),\n            variant: \"danger\",\n            size: \"sm\",\n            children: \"\\u524A\\u9664\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }, this)]\n      }, content.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    } : content));\n    setShowModal(false);\n    setModalErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 新規追加時のテキストボックスの入力に応じてエラーメッセージをクリア\n  const handleAddTextChange = e => {\n    setAddText(e.target.value);\n    if (e.target.value !== \"\") {\n      setErrorMessage(''); // テキストボックスに値がある場合はエラーメッセージをクリア\n    }\n  };\n\n  // テキストボックスの入力に応じて保存ボタンの表示状態を更新\n  const handleChange = e => {\n    const newText = e.target.value;\n    setEditedText(newText);\n    if (newText !== \"\") {\n      setModalErrorMessage(''); // エラーメッセージをクリア\n    }\n  };\n\n  // エンターキーを押したときにonClickAddを呼び出す\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      onClickAdd();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      className: \"custom-navbar bg-body-tertiary\",\n      expand: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"navbar-container\",\n        children: /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          href: \"#home\",\n          children: \"Navbar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: addText,\n          onChange: handleAddTextChange // 新規追加時のテキストボックス変更に応じた処理\n          ,\n          onKeyPress: handleKeyPress // エンターキー押下時にonClickAddを呼び出す\n          ,\n          className: \"add-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickAdd,\n        variant: \"info\",\n        children: \"\\u65B0\\u898F\\u8FFD\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todos-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todos-header\",\n        children: \"Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), contents.map(content => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: content.content\n      }, content.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditModal\n    // モーダルが表示されているかどうかを制御。trueの場合、モーダルが表示され、falseの場合は非表示\n    , {\n      showModal: showModal\n      // モーダルの閉じるボタンが押下時に呼び出し\n      ,\n      handleClose: handleClose\n      // モーダル内のテキストボックスの値を管理\n      ,\n      editedText: editedText\n      // モーダル内のテキストボックスの値が変更された時に呼び出される関数。新しいテキストの値をeditedTextに反映\n      ,\n      handleChange: handleChange\n      // 編集内容を保存する関数。保存ボタンがクリックされたと時に呼び出される\n      ,\n      handleSave: handleSave\n      // 保存ボタンの表示・非表示を制御。trueの場合、保存ボタンを表示、falseの場合は非表示\n      ,\n      isSaveButtonVisible: isSaveButtonVisible\n      // モーダル内のテキストボックスが未入力の時、エラーメッセージを表示\n      ,\n      errorModalMessage: errorModalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(BasicExample, \"X5CzkawCLgMqWsjfAzM8j8tW4Sw=\");\n_c = BasicExample;\nexport default BasicExample;\nvar _c;\n$RefreshReg$(_c, \"BasicExample\");","map":{"version":3,"names":["React","useState","Button","Container","Navbar","EditModal","axios","jsxDEV","_jsxDEV","BasicExample","_s","contents","setContents","showModal","setShowModal","selectedContentId","setSelectedContentId","editedText","setEditedText","addText","setAddText","isSaveButtonVisible","setIsSaveButtonVisible","errorMessage","setErrorMessage","errorModalMessage","setModalErrorMessage","url","onClickAdd","response","post","content","newContent","id","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","size","onClick","handleEdit","handleDelete","error","console","prevContents","filter","log","contentToEdit","find","textToEdit","props","handleClose","handleSave","map","handleAddTextChange","e","target","value","handleChange","newText","handleKeyPress","key","expand","Brand","href","type","onChange","onKeyPress","_c","$RefreshReg$"],"sources":["/Users/yudayouhei/Desktop/MENTA/React/todo-api/react-create-motion/todo-api/src/App.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'; // BootstrapのCSSをインポート\nimport React, { useState } from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button'; // React BootstrapのButtonコンポーネントをインポート\nimport Container from 'react-bootstrap/Container'; // React BootstrapのContainerコンポーネントをインポーレート\nimport Navbar from 'react-bootstrap/Navbar'; // React BootstrapのNavbarコンポーネントをインポート\nimport EditModal from './components/EditModal'; // 分離したEditModalコンポーネントをインポート\nimport axios from 'axios';\n\nfunction BasicExample() {\n  const [contents, setContents] = useState([]);\n  const [showModal, setShowModal] = useState(false); // モーダル初期状態を非表示にしておく\n  const [selectedContentId, setSelectedContentId] = useState(null); // 編集ボタンクリック時のidを管理\n  const [editedText, setEditedText] = useState(''); // フォームの状態を管理\n  const [addText, setAddText] = useState(''); // 新規ボタンクリック時のテキストの値を管理\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true); // 保存ボタンの表示状態を管理\n  const [errorMessage, setErrorMessage] = useState(''); // 新規追加時のエラーメッセージの状態を管理\n  const [errorModalMessage, setModalErrorMessage] = useState(''); // 保存時のエラーメッセージの状態を管理\n  const url = 'https://sample-api.manabupanda.net/api/list';\n\n  // 新規追加ボタンクリック時の動作\n  const onClickAdd = async () => {\n  if (addText === \"\") {\n    setErrorMessage('文字が未入力です'); // エラーメッセージを表示\n    return;\n  }\n\n  try {\n    // POSTリクエストを送信\n    const response = await axios.post(url, {\n      content: addText,  // 送信するデータ\n    });\n\n    // サーバーから返された新しいデータをもとにコンテンツを更新\n    const newContent = {\n      id: response.data.id,  // サーバーから返されるIDを使用\n      content: (\n        <div className=\"todo-item\" key={response.data.id}>\n          <div className=\"todo-text\">\n            <p className=\"todo-paragraph\">{response.data.content}</p>\n          </div>\n          <div className=\"todo-buttons\">\n            <Button variant=\"primary\" size=\"sm\" onClick={() => handleEdit(response.data.id)}>\n              編集\n            </Button>{' '}\n            <Button onClick={() => handleDelete(response.data.id)} variant=\"danger\" size=\"sm\">\n              削除\n            </Button>\n          </div>\n        </div>\n      ),\n    };\n\n    setContents([...contents, newContent]);\n    setAddText('');\n    setErrorMessage(''); // エラーメッセージをクリア\n  } catch (error) {\n    console.error('POSTリクエストエラー:', error);\n    setErrorMessage('データの追加に失敗しました'); // エラーメッセージを表示\n  }\n};\n\n  // 指定行をidにて判断しを削除\n  const handleDelete = (id) => {\n    setContents(prevContents => prevContents.filter(content => content.id !== id));\n  };\n\n  // 編集ボタンクリック時の動作\n  const handleEdit = (id) => {\n    console.log('OK');\n    setShowModal(true); // モーダルを表示\n    const contentToEdit = contents.find(content => content.id === id);\n    if (contentToEdit) {\n      // JSXからテキストを取得する方法\n      const textToEdit = contentToEdit.content.props.children[0].props.children.props.children;\n      setSelectedContentId(id); // 編集対象のコンテンツIDをセット\n      setEditedText(textToEdit); // 編集用テキストをセット\n      setIsSaveButtonVisible(true); // 初期状態でボタンの表示状態を設定\n      setModalErrorMessage(\"\"); // モーダル内のエラーメッセージをクリア\n\n    }\n  };\n\n  // モーダルを閉じる\n  const handleClose = () => setShowModal(false);\n\n  // 編集内容を保存\n  const handleSave = () => {\n    if (editedText === \"\") {\n      setModalErrorMessage('文字が未入力です'); // エラーメッセージを表示\n      setIsSaveButtonVisible(false); // ボタンを非表示にする\n      return;\n    }\n    setContents(prevContents =>\n      prevContents.map(content =>\n        content.id === selectedContentId\n          ? {\n              ...content,\n              content: (\n                <div className=\"todo-item\" key={content.id}>\n                  <div className=\"todo-text\">\n                    <p className=\"todo-paragraph\">{editedText}</p>\n                  </div>\n                  <div className=\"todo-buttons\">\n                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleEdit(content.id)}>\n                      編集\n                    </Button>{' '}\n                    <Button onClick={() => handleDelete(content.id)} variant=\"danger\" size=\"sm\">\n                      削除\n                    </Button>\n                  </div>\n                </div>\n              )\n            }\n          : content\n      )\n    );\n    setShowModal(false);\n    setModalErrorMessage(''); // エラーメッセージをクリア\n  };\n\n  // 新規追加時のテキストボックスの入力に応じてエラーメッセージをクリア\n  const handleAddTextChange = (e) => {\n    setAddText(e.target.value);\n    if (e.target.value !== \"\") {\n      setErrorMessage(''); // テキストボックスに値がある場合はエラーメッセージをクリア\n    }\n  };\n\n  // テキストボックスの入力に応じて保存ボタンの表示状態を更新\n  const handleChange = (e) => {\n    const newText = e.target.value;\n    setEditedText(newText);\n    if (newText !== \"\") {\n      setModalErrorMessage(''); // エラーメッセージをクリア\n    }\n  };\n\n  // エンターキーを押したときにonClickAddを呼び出す\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      onClickAdd();\n    }\n  };\n  \n\n  return (\n    <section>\n      <Navbar className=\"custom-navbar bg-body-tertiary\" expand=\"lg\">\n        <Container className=\"navbar-container\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n        </Container>\n      </Navbar>\n      <div className=\"add-section\">\n        <div className=\"input-container\">\n          <input\n            type='text'\n            value={addText}\n            onChange={handleAddTextChange} // 新規追加時のテキストボックス変更に応じた処理\n            onKeyPress={handleKeyPress} // エンターキー押下時にonClickAddを呼び出す\n            className=\"add-input\"\n          />\n        </div>\n        <Button onClick={onClickAdd} variant=\"info\">新規追加</Button>\n      </div>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>} \n      <div className=\"todos-container\">\n        <div className=\"todos-header\">Todos</div>\n        {contents.map((content) => (\n          <div key={content.id}>\n            {content.content}\n          </div>\n        ))}\n      </div>\n      <EditModal\n        // モーダルが表示されているかどうかを制御。trueの場合、モーダルが表示され、falseの場合は非表示\n        showModal={showModal}\n        // モーダルの閉じるボタンが押下時に呼び出し\n        handleClose={handleClose}\n        // モーダル内のテキストボックスの値を管理\n        editedText={editedText}\n        // モーダル内のテキストボックスの値が変更された時に呼び出される関数。新しいテキストの値をeditedTextに反映\n        handleChange={handleChange}\n        // 編集内容を保存する関数。保存ボタンがクリックされたと時に呼び出される\n        handleSave={handleSave}\n        // 保存ボタンの表示・非表示を制御。trueの場合、保存ボタンを表示、falseの場合は非表示\n        isSaveButtonVisible={isSaveButtonVisible}\n        // モーダル内のテキストボックスが未入力の時、エラーメッセージを表示\n        errorModalMessage={errorModalMessage}\n      />\n    </section>\n  );\n}\n\nexport default BasicExample;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}